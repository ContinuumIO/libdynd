sudo: false

dist: trusty

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - kalakris-cmake
    packages:
    - gcc-4.9
    - g++-4.9
    - cmake
    - valgrind
    - libfftw3-dev
    - s3cmd

cache:
  directories:
  - $HOME/libdynd/build

matrix:
  include:
    - compiler: gcc
      sudo: required
      env: VALGRIND
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - kalakris-cmake
          packages:
            - gcc-5
            - g++-5
            - cmake
            - doxygen
            - valgrind
            - libfftw3-dev
      before_install:
        - export CC="gcc-5"
        - export CXX="g++-5"
      script:
        - cmake -DDYND_BUILD_DOCS=ON -DDYND_BUILD_PLUGINS=OFF ..
        - make -j4 || exit 1
        - valgrind --tool=memcheck --leak-check=yes --error-exitcode=123 ./tests/test_libdynd
    - compiler: clang
      env: VALGRIND DYND_FFTW=OFF
      script:
        - make -j4 || exit 1
        - valgrind --tool=memcheck --leak-check=yes --error-exitcode=123 ./tests/test_libdynd
    - compiler: gcc
      env: CONDA=true
      before_install:
        - wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh
        - bash Miniconda-latest-Linux-x86_64.sh -b
        - export PATH=$HOME/miniconda2/bin:$PATH
        - conda install --yes conda-build jinja2 cmake
      before_script:
        - export CC="gcc-4.9"
        - export CXX="g++-4.9"
        - export SHORT_COMMIT="$(git rev-parse --short $TRAVIS_COMMIT)"
      script:
        - conda build conda.recipe
    - language: objective-c
      os: osx
      osx_image: xcode6.4
      compiler: clang
      env: CONDA=true
      addons:
      before_script:
        - export SHORT_COMMIT="$(git rev-parse --short $TRAVIS_COMMIT)"
      before_install:
        - wget https://repo.continuum.io/miniconda/Miniconda-latest-MacOSX-x86_64.sh
        - bash Miniconda-latest-MacOSX-x86_64.sh -b
        - export PATH=$HOME/miniconda2/bin:$PATH
        - conda install --yes conda-build jinja2
      script:
        - conda build conda.recipe
    - language: python
      env: DYND_FFTW=OFF VERBOSE=1
      compiler: clang
      python: 3.5
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - kalakris-cmake
            - llvm-toolchain-precise-3.5
          packages:
            - gcc-4.9
            - g++-4.9
            - clang-3.5
            - cmake
      cache:
      directories:
        - $HOME/.cache/pip
        - $HOME/dynd-python/build
      before_install:
        - export CC=clang-3.5
        - export CXX=clang++-3.5
        - travis_retry pip install --install-option="--no-cython-compile" Cython==0.23
      before_script:
        - cd ..
        - travis_retry git clone --depth=1 https://github.com/libdynd/dynd-python.git
        - mv libdynd dynd-python/libdynd
        - cd dynd-python
      script:
        - python setup.py install
        - cd ..
        - python -c "import dynd; dynd.test(verbosity=2, exit=True)"
      after_script:
        - cd .
    - compiler: gcc
      env: DYND_FFTW=ON DYND_COVERAGE=ON
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - kalakris-cmake
          packages:
            - gcc-5
            - g++-5
            - cmake
            - lcov
            - libfftw3-dev
      before_install:
        - export CC="gcc-5"
        - export CXX="g++-5"
        - gem install coveralls-lcov
        - wget https://github.com/linux-test-project/lcov/archive/v1.12.zip
        - unzip v1.12.zip
        - export PATH=${PWD}/lcov-1.12/bin:$PATH
        - cp /usr/bin/gcov-5 ${PWD}/lcov-1.12/bin/gcov
      before_script:
        - mkdir build
        - pushd build
        - cmake -DDYND_FFTW=${DYND_FFTW} -DDYND_COVERAGE=${DYND_COVERAGE} ..
      script:
        - make || exit 1
        - make coverage
      after_script:
        - popd
        - coveralls-lcov build/coverage.info.cleaned

language: cpp

before_install:

before_script:
  - mkdir build
  - pushd build
  - cmake -DDYND_FFTW=${DYND_FFTW} ..

script:
  - make -j4 || exit 1
  - ./tests/test_libdynd

before_deploy:
  - mkdir deploy
  - mv build/*.tar.gz deploy/
  - conda install --yes anaconda-client
  - export CONDA_OUTPUT=`conda build --output conda.recipe | grep bz2`
  - anaconda --token $ANACONDA_TOKEN upload $CONDA_OUTPUT --user dynd --channel dev

deploy:
  skip_cleanup: true
  provider: s3
  access_key_id: AKIAJEH6A3L3S4BYA5VA
  secret_access_key:
    secure: EmyhQ2+CtsIumNEskhjZOC/ZWYYOoPC1bQLijwuFXU8WwyEpoaB1CqLRHdiJGzVSRRr3SW3p6p8z5wxsLTBZtKQrGnP0Z4J9L7bZ5HsGRSshlqT0Zm1/AYSCjbFgNFKe1kIjaCamhk2/cNt1WKgx/cZ/tdxMKjhc8reavYBfCnU=
  bucket: libdynd
  local_dir: deploy
  on:
    condition: ${CONDA:-false} == "true"

notifications:
  email: false
  flowdock: b08b3ba4fb86fa48121e90b5f67ccb75
  on_success: change
  on_failure: always

env:
  global:
    - secure: KJZ5DWK3iAmthDnPaXz/S8aQFa6zVlD+CWCPXM+vgkiJQG5qgJfn5t2yy5n3mVyS0qZFd/LrFJ6ZqjUr/BKFDqGPBxESYIAOOgN+cXIEWxkeGFEHxOEK9QBS6aq6GBhyQlteWcqozYsG93oSVh+Xiv9tHl4m1mHXOHk2llQXy4g=
    - secure: Qt/St9copUdPo4kej+9DtLDCzIAkDo/PDP0Ac244yF+8dRac3KhskRVVURNcCMonUeuqS5Dm5qcQl9b/L4P9Gkpn1aDKPHMp7pgTZHZLJ7VIHgFrSWo545mqV0fcYN+GLpaSqd8NwdUi5+1aHGWTtrw4BoIO4DSgV4eiIVEdRbA=
