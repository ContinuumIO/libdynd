language: cpp

compiler:
  - gcc
  - clang

env:
  - VALGRIND=ON DYND_CUDA=OFF DYND_FFTW=OFF
#  - DYND_CUDA=ON DYND_FFTW=OFF
  - DYND_CUDA=OFF DYND_FFTW=ON
  - ASAN=ON DYND_CUDA=OFF DYND_FFTW=ON
  - PYTHON=ON DYND_CUDA=OFF DYND_FFTW=ON DYND_BUILD_TESTS=OFF DYND_BUILD_BENCHMARKS=OFF
#  - MSAN=ON DYND_CUDA=OFF DYND_FFTW=ON

matrix:
  exclude:
    - compiler: gcc
      env: ASAN=ON DYND_CUDA=OFF DYND_FFTW=ON
    - compiler: gcc
      env: MSAN=ON DYND_CUDA=OFF DYND_FFTW=ON
    - compiler: gcc
      env: PYTHON=ON DYND_CUDA=OFF DYND_FFTW=ON DYND_BUILD_TESTS=OFF DYND_BUILD_BENCHMARKS=OFF
    - compiler: clang
      env: DYND_CUDA=ON DYND_FFTW=OFF

before_script:
  # For newer cmake
  - sudo add-apt-repository -y ppa:kalakris/cmake
  # For gcc 4.7
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update
  - sudo apt-get install cmake
  - if [ "$CC" = "gcc" ]; then sudo apt-get -y install gcc-4.7; sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 90; export CC="gcc-4.7"; fi
  - if [ "$CXX" = "g++" ] || [ "$CXX" = "clang++" ]; then sudo apt-get -y install g++-4.7; sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 90; fi
  - if [ "$CXX" = "g++" ]; then export CXX="g++-4.7"; fi
  - if [ "$VALGRIND" == "ON" ]; then sudo apt-get -y install valgrind; fi
  - if [ "$DYND_CUDA" == "ON" ]; then wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1204/x86_64/cuda-repo-ubuntu1204_7.0-28_amd64.deb;
    sudo dpkg -i cuda-repo-ubuntu1204_7.0-28_amd64.deb; sudo apt-get update; sudo apt-get -y install cuda; fi
  - if [ "$DYND_FFTW" == "ON" ]; then sudo apt-get -y install libfftw3-dev; fi
  - if [ "$PYTHON" == "ON" ]; then sudo add-apt-repository 'deb http://llvm.org/apt/precise/ llvm-toolchain-precise-3.6 main'; wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -; sudo apt-get update; sudo apt-get -y install llvm-3.6-dev; sudo ln -s /usr/bin/llvm-config-3.6 /usr/local/bin/llvm-config; sudo apt-get -y install libedit-dev; fi
  - if [ "$PYTHON" == "ON" ]; then sudo pip install cython numpy; sudo pip install enum34; sudo pip install numba; fi
  - if [ "$ASAN" == "ON" ]; then export CXXFLAGS='-fsanitize=address -fno-omit-frame-pointer'; fi
  - if [ "$MSAN" == "ON" ]; then export CXXFLAGS='-fsanitize=memory -fsanitize-memory-track-origins -fno-omit-frame-pointer'; fi
  - if [ "$DYND_BUILD_TESTS" == "" ]; then export DYND_BUILD_TESTS=ON; fi
  - if [ "$DYND_BUILD_BENCHMARKS" == "" ]; then export DYND_BUILD_BENCHMARKS=ON; fi
  - mkdir build
  - pushd build
  - cmake $(if [ $DYND_CUDA = ON ]; then echo -DCMAKE_BUILD_TYPE=RelWithDebInfo; fi) -DDYND_CUDA=${DYND_CUDA} -DDYND_FFTW=${DYND_FFTW} -DDYND_BUILD_TESTS=${DYND_BUILD_TESTS} -DDYND_BUILD_BENCHMARKS=${DYND_BUILD_BENCHMARKS} ..

script:
  - make || exit 1
  - if [ "$DYND_CUDA" == "ON" ]; then exit; fi
  - if [ "$DYND_BUILD_TESTS" == "ON" ]; then ./tests/test_libdynd; fi
  - if [ "$VALGRIND" == "ON" ]; then valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --error-exitcode=123 ./tests/test_libdynd; fi
  - if [ "$PYTHON" == "ON" ]; then sudo make install; sudo ldconfig; popd; fi
  - if [ "$PYTHON" == "ON" ]; then git clone https://github.com/libdynd/dynd-python.git; fi
  - if [ "$PYTHON" == "ON" ]; then pushd dynd-python && sudo python setup.py install; popd; fi
  - if [ "$PYTHON" == "ON" ]; then python -c 'import dynd;dynd.test(exit=True)'; fi

notifications:
  email: false
  flowdock: b08b3ba4fb86fa48121e90b5f67ccb75
  on_success: "change"
  on_failure: "always"
