//
// Copyright (C) 2011-15 DyND Developers
// BSD 2-Clause License, see LICENSE.txt
//

#include <dynd/kernels/arithmetic.hpp>

using namespace std;
using namespace dynd;

detail::array_by_type_id<nd::arrfunc, 1> nd::multidispatch_plus_ck::children(
    {std::make_pair(int32_type_id, as_arrfunc<plus_ck<int32_t>>()),
     std::make_pair(int64_type_id, as_arrfunc<plus_ck<int64_t>>()),
     std::make_pair(float32_type_id, as_arrfunc<plus_ck<float>>()),
     std::make_pair(float64_type_id, as_arrfunc<plus_ck<double>>())});

// as_arrfunc<plus_ck, integer_sequence<int32_type_id>>();

ndt::type nd::multidispatch_plus_ck::make_type()
{
  return ndt::type("(A0) -> R");
}

detail::array_by_type_id<nd::arrfunc, 1> nd::multidispatch_minus_ck::children(
    {std::make_pair(int32_type_id, as_arrfunc<minus_ck<int32_t>>()),
     std::make_pair(int64_type_id, as_arrfunc<minus_ck<int64_t>>()),
     std::make_pair(float32_type_id, as_arrfunc<minus_ck<float>>()),
     std::make_pair(float64_type_id, as_arrfunc<minus_ck<double>>())});

ndt::type nd::multidispatch_minus_ck::make_type()
{
  return ndt::type("(A0) -> R");
}

#define MAKE_PAIR(I, J)                                                        \
  std::make_pair(std::make_pair(I, J), as_arrfunc<add_ck<I, J>>())

#define MAKE_ROW(I, J) DYND_PP_MAP(MAKE_PAIR, DYND_PP_REPEAT(I, DYND_PP_LEN(J)), J)

detail::array_by_type_id<nd::arrfunc, 2> nd::virtual_add_ck::children(
    {MAKE_PAIR(int8_type_id, int8_type_id),
     MAKE_PAIR(int8_type_id, int16_type_id),
     MAKE_PAIR(int8_type_id, int32_type_id),
     MAKE_PAIR(int8_type_id, int64_type_id),
     MAKE_PAIR(int8_type_id, uint8_type_id),
     MAKE_PAIR(int8_type_id, uint16_type_id),
     MAKE_PAIR(int8_type_id, uint32_type_id),
     MAKE_PAIR(int8_type_id, uint64_type_id),
     MAKE_PAIR(int8_type_id, float32_type_id),
     MAKE_PAIR(int8_type_id, float64_type_id),
     MAKE_PAIR(int8_type_id, complex_float32_type_id),
     MAKE_PAIR(int8_type_id, complex_float64_type_id),
     MAKE_PAIR(int16_type_id, int8_type_id),
     MAKE_PAIR(int16_type_id, int16_type_id),
     MAKE_PAIR(int16_type_id, int32_type_id),
     MAKE_PAIR(int16_type_id, int64_type_id),
     MAKE_PAIR(int16_type_id, uint8_type_id),
     MAKE_PAIR(int16_type_id, uint16_type_id),
     MAKE_PAIR(int16_type_id, uint32_type_id),
     MAKE_PAIR(int16_type_id, uint64_type_id),
     MAKE_PAIR(int16_type_id, float32_type_id),
     MAKE_PAIR(int16_type_id, float64_type_id),
     MAKE_PAIR(int16_type_id, complex_float32_type_id),
     MAKE_PAIR(int16_type_id, complex_float64_type_id),
     MAKE_PAIR(int32_type_id, int8_type_id),
     MAKE_PAIR(int32_type_id, int16_type_id),
     MAKE_PAIR(int32_type_id, int32_type_id),
     MAKE_PAIR(int32_type_id, int64_type_id),
     MAKE_PAIR(int32_type_id, uint8_type_id),
     MAKE_PAIR(int32_type_id, uint16_type_id),
     MAKE_PAIR(int32_type_id, uint32_type_id),
     MAKE_PAIR(int32_type_id, uint64_type_id),
     MAKE_PAIR(int32_type_id, float32_type_id),
     MAKE_PAIR(int32_type_id, float64_type_id),
     MAKE_PAIR(int32_type_id, complex_float32_type_id),
     MAKE_PAIR(int32_type_id, complex_float64_type_id),
     MAKE_PAIR(int64_type_id, int8_type_id),
     MAKE_PAIR(int64_type_id, int16_type_id),
     MAKE_PAIR(int64_type_id, int32_type_id),
     MAKE_PAIR(int64_type_id, int64_type_id),
     MAKE_PAIR(int64_type_id, uint8_type_id),
     MAKE_PAIR(int64_type_id, uint16_type_id),
     MAKE_PAIR(int64_type_id, uint32_type_id),
     MAKE_PAIR(int64_type_id, uint64_type_id),
     MAKE_PAIR(int64_type_id, float32_type_id),
     MAKE_PAIR(int64_type_id, float64_type_id),
     MAKE_PAIR(int64_type_id, complex_float32_type_id),
     MAKE_PAIR(int64_type_id, complex_float64_type_id),
     MAKE_PAIR(float32_type_id, int8_type_id),
     MAKE_PAIR(float32_type_id, int16_type_id),
     MAKE_PAIR(float32_type_id, int32_type_id),
     MAKE_PAIR(float32_type_id, int64_type_id),
     MAKE_PAIR(float32_type_id, uint8_type_id),
     MAKE_PAIR(float32_type_id, uint16_type_id),
     MAKE_PAIR(float32_type_id, uint32_type_id),
     MAKE_PAIR(float32_type_id, uint64_type_id),
     MAKE_PAIR(float32_type_id, float32_type_id),
     MAKE_PAIR(float32_type_id, float64_type_id),
     MAKE_PAIR(float32_type_id, complex_float32_type_id),
     MAKE_PAIR(float32_type_id, complex_float64_type_id),
     MAKE_PAIR(float64_type_id, int8_type_id),
     MAKE_PAIR(float64_type_id, int16_type_id),
     MAKE_PAIR(float64_type_id, int32_type_id),
     MAKE_PAIR(float64_type_id, int64_type_id),
     MAKE_PAIR(float64_type_id, uint8_type_id),
     MAKE_PAIR(float64_type_id, uint16_type_id),
     MAKE_PAIR(float64_type_id, uint32_type_id),
     MAKE_PAIR(float64_type_id, uint64_type_id),
     MAKE_PAIR(float64_type_id, float32_type_id),
     MAKE_PAIR(float64_type_id, float64_type_id),
     MAKE_PAIR(float64_type_id, complex_float32_type_id),
     MAKE_PAIR(float64_type_id, complex_float64_type_id)});

#undef MAKE_PAIR

ndt::type nd::virtual_add_ck::make_type() { return ndt::type("(A0, A1) -> R"); }

detail::array_by_type_id<nd::arrfunc, 2> nd::virtual_subtract_ck::children(
    {std::make_pair(std::make_pair(int8_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<int8_t, int8_t>>()),
     std::make_pair(std::make_pair(int8_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<int8_t, int16_t>>()),
     std::make_pair(std::make_pair(int8_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<int8_t, int32_t>>()),
     std::make_pair(std::make_pair(int8_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<int8_t, int64_t>>()),
     std::make_pair(std::make_pair(int8_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<int8_t, uint8_t>>()),
     std::make_pair(std::make_pair(int8_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<int8_t, uint16_t>>()),
     std::make_pair(std::make_pair(int8_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<int8_t, uint32_t>>()),
     std::make_pair(std::make_pair(int8_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<int8_t, uint64_t>>()),
     std::make_pair(std::make_pair(int8_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<int8_t, float>>()),
     std::make_pair(std::make_pair(int8_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<int8_t, double>>()),
     std::make_pair(std::make_pair(int8_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<int8_t, complex<float>>>()),
     std::make_pair(std::make_pair(int8_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<int8_t, complex<double>>>()),
     std::make_pair(std::make_pair(int16_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<int16_t, int8_t>>()),
     std::make_pair(std::make_pair(int16_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<int16_t, int16_t>>()),
     std::make_pair(std::make_pair(int16_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<int16_t, int32_t>>()),
     std::make_pair(std::make_pair(int16_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<int16_t, int64_t>>()),
     std::make_pair(std::make_pair(int16_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<int16_t, uint8_t>>()),
     std::make_pair(std::make_pair(int16_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<int16_t, uint16_t>>()),
     std::make_pair(std::make_pair(int16_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<int16_t, uint32_t>>()),
     std::make_pair(std::make_pair(int16_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<int16_t, uint64_t>>()),
     std::make_pair(std::make_pair(int16_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<int16_t, float>>()),
     std::make_pair(std::make_pair(int16_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<int16_t, double>>()),
     std::make_pair(std::make_pair(int16_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<int16_t, complex<float>>>()),
     std::make_pair(std::make_pair(int16_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<int16_t, complex<double>>>()),
     std::make_pair(std::make_pair(int32_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<int32_t, int8_t>>()),
     std::make_pair(std::make_pair(int32_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<int32_t, int16_t>>()),
     std::make_pair(std::make_pair(int32_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<int32_t, int32_t>>()),
     std::make_pair(std::make_pair(int32_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<int32_t, int64_t>>()),
     std::make_pair(std::make_pair(int32_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<int32_t, uint8_t>>()),
     std::make_pair(std::make_pair(int32_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<int32_t, uint16_t>>()),
     std::make_pair(std::make_pair(int32_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<int32_t, uint32_t>>()),
     std::make_pair(std::make_pair(int32_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<int32_t, uint64_t>>()),
     std::make_pair(std::make_pair(int32_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<int32_t, float>>()),
     std::make_pair(std::make_pair(int32_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<int32_t, double>>()),
     std::make_pair(std::make_pair(int32_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<int32_t, complex<float>>>()),
     std::make_pair(std::make_pair(int32_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<int32_t, complex<double>>>()),
     std::make_pair(std::make_pair(int64_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<int64_t, int8_t>>()),
     std::make_pair(std::make_pair(int64_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<int64_t, int16_t>>()),
     std::make_pair(std::make_pair(int64_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<int64_t, int32_t>>()),
     std::make_pair(std::make_pair(int64_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<int64_t, int64_t>>()),
     std::make_pair(std::make_pair(int64_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<int64_t, uint8_t>>()),
     std::make_pair(std::make_pair(int64_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<int64_t, uint16_t>>()),
     std::make_pair(std::make_pair(int64_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<int64_t, uint32_t>>()),
     std::make_pair(std::make_pair(int64_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<int64_t, uint64_t>>()),
     std::make_pair(std::make_pair(int64_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<int64_t, float>>()),
     std::make_pair(std::make_pair(int64_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<int64_t, double>>()),
     std::make_pair(std::make_pair(int64_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<int64_t, complex<float>>>()),
     std::make_pair(std::make_pair(int64_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<int64_t, complex<double>>>()),
     std::make_pair(std::make_pair(float32_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<float, int8_t>>()),
     std::make_pair(std::make_pair(float32_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<float, int16_t>>()),
     std::make_pair(std::make_pair(float32_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<float, int32_t>>()),
     std::make_pair(std::make_pair(float32_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<float, int64_t>>()),
     std::make_pair(std::make_pair(float32_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<float, uint8_t>>()),
     std::make_pair(std::make_pair(float32_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<float, uint16_t>>()),
     std::make_pair(std::make_pair(float32_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<float, uint32_t>>()),
     std::make_pair(std::make_pair(float32_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<float, uint64_t>>()),
     std::make_pair(std::make_pair(float32_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<float, float>>()),
     std::make_pair(std::make_pair(float32_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<float, double>>()),
     std::make_pair(std::make_pair(float32_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<float, complex<float>>>()),
     std::make_pair(std::make_pair(float32_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<float, complex<double>>>()),
     std::make_pair(std::make_pair(float64_type_id, int8_type_id),
                    as_arrfunc<subtract_ck<double, int8_t>>()),
     std::make_pair(std::make_pair(float64_type_id, int16_type_id),
                    as_arrfunc<subtract_ck<double, int16_t>>()),
     std::make_pair(std::make_pair(float64_type_id, int32_type_id),
                    as_arrfunc<subtract_ck<double, int32_t>>()),
     std::make_pair(std::make_pair(float64_type_id, int64_type_id),
                    as_arrfunc<subtract_ck<double, int64_t>>()),
     std::make_pair(std::make_pair(float64_type_id, uint8_type_id),
                    as_arrfunc<subtract_ck<double, uint8_t>>()),
     std::make_pair(std::make_pair(float64_type_id, uint16_type_id),
                    as_arrfunc<subtract_ck<double, uint16_t>>()),
     std::make_pair(std::make_pair(float64_type_id, uint32_type_id),
                    as_arrfunc<subtract_ck<double, uint32_t>>()),
     std::make_pair(std::make_pair(float64_type_id, uint64_type_id),
                    as_arrfunc<subtract_ck<double, uint64_t>>()),
     std::make_pair(std::make_pair(float64_type_id, float32_type_id),
                    as_arrfunc<subtract_ck<double, float>>()),
     std::make_pair(std::make_pair(float64_type_id, float64_type_id),
                    as_arrfunc<subtract_ck<double, double>>()),
     std::make_pair(std::make_pair(float64_type_id, complex_float32_type_id),
                    as_arrfunc<subtract_ck<double, complex<float>>>()),
     std::make_pair(std::make_pair(float64_type_id, complex_float64_type_id),
                    as_arrfunc<subtract_ck<double, complex<double>>>())});

ndt::type nd::virtual_subtract_ck::make_type()
{
  return ndt::type("(A0, A1) -> R");
}