//
// Copyright (C) 2011-14 Irwin Zaid, DyND Developers
// BSD 2-Clause License, see LICENSE.txt
//

#include "inc_gtest.hpp"

#include <dynd/pp/comparision.hpp>

using namespace std;

TEST(PPComparision, Lt) {
    EXPECT_FALSE(DYND_PP_LT(0, 0));
    EXPECT_TRUE(DYND_PP_LT(0, 1));
    EXPECT_FALSE(DYND_PP_LT(1, 0));
    EXPECT_FALSE(DYND_PP_LT(4, 2));
    EXPECT_TRUE(DYND_PP_LT(3, 4));
    EXPECT_FALSE(DYND_PP_LT(4, 3));
    EXPECT_TRUE(DYND_PP_LT(0, 7));
    EXPECT_FALSE(DYND_PP_LT(7, 0));
    EXPECT_TRUE(DYND_PP_LT(0, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_LT(DYND_PP_INT_MAX, 0));
    EXPECT_FALSE(DYND_PP_LT(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_LT(0, DYND_PP_LEN_MAX));
    EXPECT_FALSE(DYND_PP_LT(DYND_PP_LEN_MAX, 0));
    EXPECT_FALSE(DYND_PP_LT(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}

TEST(PPComparision, Le) {
    EXPECT_TRUE(DYND_PP_LE(0, 0));
    EXPECT_TRUE(DYND_PP_LE(0, 1));
    EXPECT_FALSE(DYND_PP_LE(1, 0));
    EXPECT_FALSE(DYND_PP_LE(4, 2));
    EXPECT_TRUE(DYND_PP_LE(3, 4));
    EXPECT_FALSE(DYND_PP_LE(4, 3));
    EXPECT_TRUE(DYND_PP_LE(0, 7));
    EXPECT_FALSE(DYND_PP_LE(7, 0));
    EXPECT_TRUE(DYND_PP_LE(0, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_LE(DYND_PP_INT_MAX, 0));
    EXPECT_TRUE(DYND_PP_LE(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_LE(0, DYND_PP_LEN_MAX));
    EXPECT_FALSE(DYND_PP_LE(DYND_PP_LEN_MAX, 0));
    EXPECT_TRUE(DYND_PP_LE(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}

TEST(PPComparision, Eq) {
    EXPECT_TRUE(DYND_PP_EQ(0, 0));
    EXPECT_FALSE(DYND_PP_EQ(0, 1));
    EXPECT_FALSE(DYND_PP_EQ(1, 0));
    EXPECT_FALSE(DYND_PP_EQ(4, 2));
    EXPECT_FALSE(DYND_PP_EQ(3, 4));
    EXPECT_FALSE(DYND_PP_EQ(4, 3));
    EXPECT_FALSE(DYND_PP_EQ(0, 7));
    EXPECT_FALSE(DYND_PP_EQ(7, 0));
    EXPECT_FALSE(DYND_PP_EQ(0, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_EQ(DYND_PP_INT_MAX, 0));
    EXPECT_TRUE(DYND_PP_EQ(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_EQ(0, DYND_PP_LEN_MAX));
    EXPECT_FALSE(DYND_PP_EQ(DYND_PP_LEN_MAX, 0));
    EXPECT_TRUE(DYND_PP_EQ(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}

TEST(PPComparision, Ne) {
    EXPECT_FALSE(DYND_PP_NE(0, 0));
    EXPECT_TRUE(DYND_PP_NE(0, 1));
    EXPECT_TRUE(DYND_PP_NE(1, 0));
    EXPECT_TRUE(DYND_PP_NE(4, 2));
    EXPECT_TRUE(DYND_PP_NE(3, 4));
    EXPECT_TRUE(DYND_PP_NE(4, 3));
    EXPECT_TRUE(DYND_PP_NE(0, 7));
    EXPECT_TRUE(DYND_PP_NE(7, 0));
    EXPECT_TRUE(DYND_PP_NE(0, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_NE(DYND_PP_INT_MAX, 0));
    EXPECT_FALSE(DYND_PP_NE(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_NE(0, DYND_PP_LEN_MAX));
    EXPECT_TRUE(DYND_PP_NE(DYND_PP_LEN_MAX, 0));
    EXPECT_FALSE(DYND_PP_NE(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}

TEST(PPComparision, Ge) {
    EXPECT_TRUE(DYND_PP_GE(0, 0));
    EXPECT_FALSE(DYND_PP_GE(0, 1));
    EXPECT_TRUE(DYND_PP_GE(1, 0));
    EXPECT_TRUE(DYND_PP_GE(4, 2));
    EXPECT_FALSE(DYND_PP_GE(3, 4));
    EXPECT_TRUE(DYND_PP_GE(4, 3));
    EXPECT_FALSE(DYND_PP_GE(0, 7));
    EXPECT_TRUE(DYND_PP_GE(7, 0));
    EXPECT_FALSE(DYND_PP_GE(0, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_GE(DYND_PP_INT_MAX, 0));
    EXPECT_TRUE(DYND_PP_GE(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_GE(0, DYND_PP_LEN_MAX));
    EXPECT_TRUE(DYND_PP_GE(DYND_PP_LEN_MAX, 0));
    EXPECT_TRUE(DYND_PP_GE(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}

TEST(PPComparision, Gt) {
    EXPECT_FALSE(DYND_PP_GT(0, 0));
    EXPECT_FALSE(DYND_PP_GT(0, 1));
    EXPECT_TRUE(DYND_PP_GT(1, 0));
    EXPECT_TRUE(DYND_PP_GT(4, 2));
    EXPECT_FALSE(DYND_PP_GT(3, 4));
    EXPECT_TRUE(DYND_PP_GT(4, 3));
    EXPECT_FALSE(DYND_PP_GT(0, 7));
    EXPECT_TRUE(DYND_PP_GT(7, 0));
    EXPECT_FALSE(DYND_PP_GT(0, DYND_PP_INT_MAX));
    EXPECT_TRUE(DYND_PP_GT(DYND_PP_INT_MAX, 0));
    EXPECT_FALSE(DYND_PP_GT(DYND_PP_INT_MAX, DYND_PP_INT_MAX));
    EXPECT_FALSE(DYND_PP_GT(0, DYND_PP_LEN_MAX));
    EXPECT_TRUE(DYND_PP_GT(DYND_PP_LEN_MAX, 0));
    EXPECT_FALSE(DYND_PP_GT(DYND_PP_LEN_MAX, DYND_PP_LEN_MAX));
}
